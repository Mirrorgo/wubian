generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlists Playlist[]
  artists   Artist[]   @relation("UserArtist")
  albums    Album[]    @relation("UserAlbum")

  currentList CurrentList?
}

model Song {
  id        Int      @id @default(autoincrement())
  title     String
  url       String?
  albumId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artist       Artist[]          @relation("SongArtist")
  album        Album?            @relation(fields: [albumId], references: [id])
  playlists    Playlist[]        @relation("PlaylistSong") // 隐式处理多对多的关系
  currentLists CurrentListSong[]
}

// 歌手
model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  songs     Song[]   @relation("SongArtist")
  albums    Album[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[] @relation("UserArtist")
}

// 专辑
model Album {
  id        Int      @id @default(autoincrement())
  title     String
  artistId  Int
  artist    Artist   @relation(fields: [artistId], references: [id])
  songs     Song[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[] @relation("UserAlbum")
}

// 歌单
model Playlist {
  id        Int      @id @default(autoincrement())
  title     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  songs     Song[]   @relation("PlaylistSong")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CurrentList {
  id                   Int               @id @default(autoincrement())
  userId               Int               @unique
  songs                CurrentListSong[]
  currentPlayingSongId Int? // currentlistsong model的 id
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  user                 User              @relation(fields: [userId], references: [id])
}

model CurrentListSong {
  id            Int         @id @default(autoincrement())
  currentListId Int
  songId        Int
  order         Int
  currentList   CurrentList @relation(fields: [currentListId], references: [id])
  song          Song        @relation(fields: [songId], references: [id])

  @@unique([currentListId, order])
}
